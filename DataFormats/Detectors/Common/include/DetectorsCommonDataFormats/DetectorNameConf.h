// Copyright 2019-2020 CERN and copyright holders of ALICE O2.
// See https://alice-o2.web.cern.ch/copyright for details of the copyright holders.
// All rights not expressly granted are reserved.
//
// This software is distributed under the terms of the GNU General Public
// License v3 (GPL Version 3), copied verbatim in the file "COPYING".
//
// In applying this license CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

#ifndef ALICEO2_DETECTOR_NAME_GENERATOR_H_
#define ALICEO2_DETECTOR_NAME_GENERATOR_H_

#include "DetectorsCommonDataFormats/DetID.h"
#include "CommonUtils/NameConf.h"

/// \file DetectorNameConf.h
/// \brief Definition of the Names Generator class
namespace o2
{
namespace base
{

// Class for standardization of the names for output files and trees
class DetectorNameConf : public NameConf
{
  using DId = o2::detectors::DetID;

 public:
  // The Hits file name are generated by hardcoded schema, only prefix is mutable to allow the embedding
  static std::string getHitsFileName(DId d, const std::string_view prefix = STANDARDSIMPREFIX)
  {
    return o2::utils::Str::concat_string(prefix, "_", HITS_STRING, d.getName(), ".root");
  }

  // The Digits file name are generated by hardcoded schema, only prefix is mutable to allow the embedding
  static std::string getDigitsFileName(DId d, const std::string_view prefix = STANDARDSIMPREFIX)
  {
    return o2::utils::Str::concat_string(prefix, "_", DIGITS_STRING, d.getName(), ".root");
  }

  // Filename to for decoding dictionaries
  static std::string getAlpideClusterDictionaryFileName(DId det, const std::string_view prefix = "", const std::string_view ext = "bin");

  // Filename to for noise maps
  static std::string getNoiseFileName(DId det, const std::string_view prefix = "", const std::string_view ext = "");

  // The alignment object path in CCDB
  static std::string getAlignmentPath(DId d)
  {
    return o2::utils::Str::concat_string(d.getName(), "/", ALIGNPATH);
  }

  ClassDefNV(DetectorNameConf, 0);
};

} // namespace base
} // namespace o2

#endif
