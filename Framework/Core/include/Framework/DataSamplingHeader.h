// Copyright CERN and copyright holders of ALICE O2. This software is
// distributed under the terms of the GNU General Public License v3 (GPL
// Version 3), copied verbatim in the file "COPYING".
//
// See http://alice-o2.web.cern.ch/license for full licensing information.
//
// In applying this license CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

#ifndef ALICEO2_DATASAMPLINGHEADER_H
#define ALICEO2_DATASAMPLINGHEADER_H

/// \file DataSamplingHeader.h
/// \brief A declaration of O2 Data Sampling Header
///
/// \author Piotr Konopka, piotr.jan.konopka@cern.ch

/// @brief a header which contains some meta-data generated by Data Sampling

#include "Headers/DataHeader.h"

namespace o2
{
namespace framework
{

struct DataSamplingHeader : public header::BaseHeader {

  // static data for this header type/version
  static const uint32_t sVersion;
  static const o2::header::HeaderType sHeaderType;
  static const o2::header::SerializationMethod sSerializationMethod;

  static constexpr uint32_t deviceIDTypeSize = 16;

  using DeviceIDType = header::Descriptor<deviceIDTypeSize>;

  // data sampling header fields
  uint64_t sampleTimeUs;
  uint32_t totalAcceptedMessages;
  uint32_t totalEvaluatedMessages;
  DeviceIDType deviceID;

  DataSamplingHeader()
    : DataSamplingHeader(0, 0, 0, "")
  {
  }

  DataSamplingHeader(uint64_t _sampleTimeUs, uint32_t _totalAcceptedMessages, uint32_t _totalEvaluatedMessages, DeviceIDType _deviceID)
    : BaseHeader(sizeof(DataSamplingHeader), sHeaderType, sSerializationMethod, sVersion),
      sampleTimeUs(_sampleTimeUs),
      totalAcceptedMessages(_totalAcceptedMessages),
      totalEvaluatedMessages(_totalEvaluatedMessages),
      deviceID(_deviceID)
  {
  }

  DataSamplingHeader(const DataSamplingHeader&) = default;
  DataSamplingHeader& operator=(const DataSamplingHeader&) = default;

  static const DataSamplingHeader* Get(const BaseHeader* baseHeader)
  {
    return (baseHeader->description == DataSamplingHeader::sHeaderType) ? static_cast<const DataSamplingHeader*>(baseHeader) : nullptr;
  }
};

} // namespace framework
} // namespace o2

#endif //ALICEO2_DATASAMPLINGHEADER_H
