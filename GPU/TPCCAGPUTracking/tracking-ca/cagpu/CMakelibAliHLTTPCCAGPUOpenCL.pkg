# -*- mode: CMake -*- 
# $Id$
#--------------------------------------------------------------------------------#
# Package File for AliHLTTPCCAGPUOpenCL                                          #
# Author : Johny Jose (johny.jose@cern.ch)                                       #
# Variables Defined :                                                            #
#                                                                                #
# SRCS - C++ source files                                                        #
# HDRS - C++ header files                                                        #
# DHDR - ROOT Dictionary Linkdef header file                                     #
# CSRCS - C source files                                                         #
# CHDRS - C header files                                                         #
# EINCLUDE - Include directories                                                 #
# EDEFINE - Compiler definitions                                                 #
# ELIBS - Extra libraries to link                                                #
# ELIBSDIR - Extra library directories                                           #
# PACKFFLAGS - Fortran compiler flags for package                                #
# PACKCXXFLAGS - C++ compiler flags for package                                  #
# PACKCFLAGS - C compiler flags for package                                      #
# PACKSOFLAGS - Shared library linking flags                                     #
# PACKLDFLAGS - Module linker flags                                              #
# PACKBLIBS - Libraries to link (Executables only)                               #
# EXPORT - Header files to be exported                                           #
# CINTHDRS - Dictionary header files                                             #
# CINTAUTOLINK - Set automatic dictionary generation                             #
# ARLIBS - Archive Libraries and objects for linking (Executables only)          #
# SHLIBS - Shared Libraries and objects for linking (Executables only)           #
#--------------------------------------------------------------------------------#


# AMD APP SDK required for OpenCL tracker; it's using specific
# extensions (currently) not provided by other vendors.
# either set cmake variable via "-D$AMDAPPSDKROOT=/path/to/amdappsdkroot"
# or via environment variable $AMDAPPSDKROOT
if ( NOT AMDAPPSDKROOT )
  set ( AMDAPPSDKROOT $ENV{AMDAPPSDKROOT} )
endif()

if ( NOT AMDAPPSDKROOT )
  #fail if not set
  message ( FATAL_ERROR "AMDAPPSDKROOT not set. Please install AMD APP SDK and set $AMDAPPSDKROOT or disable HLT_OPENCL." )
endif()

if ( NOT "$ENV{GPU_FORCE_64BIT_PTR}" STREQUAL "1"  )
  message ( FATAL_ERROR "Please set env variable $GPU_FORCE_64BIT_PTR=1, required by HLT OpenCL tracker.")
endif()

#convenience variables
set ( CAGPUDIR TPCLib/tracking-ca/cagpu )

# build the OpenCL compile wrapper:
# -- checks the correct vendor implementation (AMD)
# -- builds binary code (blob) for the found platform(s)
add_executable ( opencl_compiler ${CAGPUDIR}/makefiles/makefile_opencl_compiler.cpp )
target_link_libraries ( opencl_compiler -L${AMDAPPSDKROOT}/lib/x86_64 OpenCL )

#convenience variables
set (CL_SRC ${CMAKE_CURRENT_SOURCE_DIR}/${CAGPUDIR}/AliHLTTPCCAGPUTrackerOpenCL.cl )
set (CL_BIN ${CMAKE_CURRENT_BINARY_DIR}/AliHLTTPCCAGPUTrackerOpenCLCode.bin )
set (CL_INC 
  -I${CMAKE_CURRENT_SOURCE_DIR}/BASE 
  -I${CMAKE_CURRENT_SOURCE_DIR}/TPCLib/tracking-ca 
  -I${CMAKE_CURRENT_SOURCE_DIR}/${CAGPUDIR}
)

# executes OpenCL compiler wrapper to build binary object
add_custom_command(
  OUTPUT ${CL_BIN}
  COMMAND opencl_compiler -output-file ${CL_BIN} ${CL_SRC} -- ${CL_INC} -x clc++
  MAIN_DEPENDENCY ${CL_SRC}
)

# make cmake compile the assembler file
set_source_files_properties(${CAGPUDIR}/makefiles/include.S PROPERTIES LANGUAGE CXX)
# add proper dependency on included binary code
set_source_files_properties(${CAGPUDIR}/makefiles/include.S PROPERTIES OBJECT_DEPENDS ${CL_BIN})


#usual aliroot library stuff...
set ( CLASS_HDRS
  AliHLTTPCCAGPUTrackerBase.h
  AliHLTTPCCAGPUTrackerOpenCL.h
)

set ( MODULE_SRCS 
  AliHLTTPCCAGPUTrackerBase.cxx
  AliHLTTPCCAGPUTrackerOpenCL.cxx
  makefiles/include.S
)

set ( MODULE_HDRS
  ${CLASS_HDRS}
  AliHLTTPCCAGPUTrackerCommon.h
  AliHLTTPCCAGPUTrackerOpenCLInternals.h
)

set ( MODULE_DHDR )

set ( EINCLUDE ${AMDAPPSDKROOT}/include HLT/${CAGPUDIR} HLT/${CAGPUDIR}/makefiles HLT/TPCLib/tracking-ca HLT/BASE )

set ( ELIBS -L$(AMDAPPSDKROOT)/lib/x86_64 -lOpenCL )

include ("CMakehlt.conf")

if (MODULE_SRCS)
ALICE_Format (SRCS "${CAGPUDIR}/" "" "${MODULE_SRCS}")
endif(MODULE_SRCS)
if (CLASS_HDRS)
ALICE_Format (CINTHDRS "${CAGPUDIR}/" "" "${CLASS_HDRS}")
endif(CLASS_HDRS)
if (MODULE_HDRS)
ALICE_Format (HDRS "${CAGPUDIR}/" "" "${MODULE_HDRS}")
endif(MODULE_HDRS)
if (MODULE_DHDR)
ALICE_Format (DHDR "${CAGPUDIR}/" "" "${MODULE_DHDR}")
endif(MODULE_DHDR)

# bit of a hack, but otherwise dictionary compilation fails:
# defines __ROOT__; triggers "ifdef" in source code to circumvent broken cint behaviour with "volatile" keyword
# not sure why __ROOT__ is used here, could just as well be something else
set_source_files_properties(${CMAKE_CURRENT_BINARY_DIR}/G__AliHLTTPCCAGPUOpenCL.cxx PROPERTIES COMPILE_DEFINITIONS "__ROOT__")

if(NOT DHDR)
  set(CINTAUTOLINK 1)
endif(NOT DHDR)

set ( EDEFINE  ${HLTDEFS} )
set ( PACKCXXFLAGS  "${HLTCXXFLAGS} -Wshadow -Wall -O3")
set ( PACKCFLAGS  ${HLTCLFAGS})
set ( PACKDCXXFLAGS  ${HLTDCXXFLAGS})
set ( PACKSOFLAGS ${HLTSOFLAGS})
#set ( CINTFLAGS )
