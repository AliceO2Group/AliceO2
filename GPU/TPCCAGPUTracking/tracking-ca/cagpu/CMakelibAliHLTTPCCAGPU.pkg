# -*- mode: CMake -*- 
# $Id$
#--------------------------------------------------------------------------------#
# Package File for AliHLTTPCCAGPU                                                #
# Author : Johny Jose (johny.jose@cern.ch)                                       #
# Variables Defined :                                                            #
#                                                                                #
# SRCS - C++ source files                                                        #
# HDRS - C++ header files                                                        #
# DHDR - ROOT Dictionary Linkdef header file                                     #
# CSRCS - C source files                                                         #
# CHDRS - C header files                                                         #
# EINCLUDE - Include directories                                                 #
# EDEFINE - Compiler definitions                                                 #
# ELIBS - Extra libraries to link                                                #
# ELIBSDIR - Extra library directories                                           #
# PACKFFLAGS - Fortran compiler flags for package                                #
# PACKCXXFLAGS - C++ compiler flags for package                                  #
# PACKCFLAGS - C compiler flags for package                                      #
# PACKSOFLAGS - Shared library linking flags                                     #
# PACKLDFLAGS - Module linker flags                                              #
# PACKBLIBS - Libraries to link (Executables only)                               #
# EXPORT - Header files to be exported                                           #
# CINTHDRS - Dictionary header files                                             #
# CINTAUTOLINK - Set automatic dictionary generation                             #
# ARLIBS - Archive Libraries and objects for linking (Executables only)          #
# SHLIBS - Shared Libraries and objects for linking (Executables only)           #
#--------------------------------------------------------------------------------#

find_package ( CUDA )
if ( NOT CUDA_FOUND )
  #fail if CUDA wasn't found
  message ( FATAL_ERROR "NVIDIA CUDA package not found. Please install or set HLT_CUDA=OFF" )
endif ( NOT CUDA_FOUND )

#set nvcc flags
set ( CUDA_NVCC_FLAGS --use_fast_math --maxrregcount 64 -O4 -Xptxas -O4 -gencode arch=compute_20,code=sm_20 -gencode arch=compute_30,code=sm_30 -gencode arch=compute_35,code=sm_35 )
#for convenience
set ( CAGPUDIR TPCLib/tracking-ca/cagpu )
#add include path
include_directories( ${CAGPUDIR} )
#nvcc fails with std=c++11, remove it temporarily
string ( FIND ${CMAKE_CXX_FLAGS} "-std=c++11" STDCXX11FOUND )
if ( STDCXX11FOUND GREATER -1 )
  string ( REPLACE "-std=c++11" "-std=c++98" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}" )
endif ( )
#compile CUDA object file
cuda_compile ( CAGPU_O ${CAGPUDIR}/AliHLTTPCCAGPUTrackerNVCC.cu )
#set it back
if ( STDCXX11FOUND GREATER -1 )
  string ( REPLACE "-std=c++98" "-std=c++11" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}" )
endif ( )
#end of CUDA specific stuff; from here on build usual library

set ( CLASS_HDRS
  AliHLTTPCCAGPUTrackerBase.h
  AliHLTTPCCAGPUTrackerNVCC.h
)

set ( MODULE_SRCS 
  AliHLTTPCCAGPUTrackerBase.cxx
)

set ( MODULE_HDRS
  ${CLASS_HDRS}
  AliHLTTPCCAGPUTrackerCommon.h
)

set ( MODULE_DHDR )

set ( EINCLUDE HLT/${CAGPUDIR} HLT/TPCLib/tracking-ca HLT/BASE )

#CUDA run-time and driver
set ( ELIBS ${CUDA_LIBRARIES} -lcuda )

include ("CMakehlt.conf")

if (MODULE_SRCS)
ALICE_Format (SRCS "${CAGPUDIR}/" "" "${MODULE_SRCS}")
endif(MODULE_SRCS)
if (CLASS_HDRS)
ALICE_Format (CINTHDRS "${CAGPUDIR}/" "" "${CLASS_HDRS}")
endif(CLASS_HDRS)
if (MODULE_HDRS)
ALICE_Format (HDRS "${CAGPUDIR}/" "" "${MODULE_HDRS}")
endif(MODULE_HDRS)
if (MODULE_DHDR)
ALICE_Format (DHDR "${CAGPUDIR}/" "" "${MODULE_DHDR}")
endif(MODULE_DHDR)

#add CUDA object file(s) as library (link) dependency
list(APPEND SRCS ${CAGPU_O})

# bit of a hack, but otherwise dictionary compilation fails:
# defines cudaError_t to make it known
# defines __ROOT__; triggers "ifdef" in source code to circumvent broken cint behaviour with "volatile" keyword
# not sure why __ROOT__ is used here, could just as well be something else
set_source_files_properties(${CMAKE_CURRENT_BINARY_DIR}/G__AliHLTTPCCAGPU.cxx PROPERTIES COMPILE_DEFINITIONS "cudaError_t=int;__ROOT__")

if(NOT DHDR)
  set(CINTAUTOLINK 1)
endif(NOT DHDR)

set ( EDEFINE  ${HLTDEFS} )
set ( PACKCXXFLAGS  "${HLTCXXFLAGS} -Wshadow -Wall -O3")
set ( PACKCFLAGS  ${HLTCLFAGS})
set ( PACKDCXXFLAGS  ${HLTDCXXFLAGS})
set ( PACKSOFLAGS ${HLTSOFLAGS})
#set ( CINTFLAGS )
