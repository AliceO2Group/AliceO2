#include "SimSetup/FlukaParam.h"

TVirtualMC* FlukaRuntimeConfig()
{
  FairRunSim* run = FairRunSim::Instance();
  TString* gModel = run->GetGeoModel();
  TFluka* fluka = new TFluka("C++ Interface to Fluka", 0);

  // additional configuration paramters if requested from command line
  auto& params = o2::FlukaParam::Instance();
  auto isAct = params.activationSimulation;
  auto lowNeutron = params.lowNeutron;
  auto inpFile = params.scoringFile;
  auto userStepping = params.userStepping;
  auto hadronCut = params.activationHadronCut;
  if (!inpFile.empty()) {
    fluka->SetActivationSimulation(isAct, hadronCut);
    fluka->SetUserScoringFileName(inpFile.c_str());
    fluka->SetLowEnergyNeutronTransport(kTRUE);
    fluka->SetUserScoringFileName(inpFile.c_str());
    fluka->SetUserStepping(userStepping);
  }
  std::cout << "FLUKA ptr " << fluka << "\n";
  std::cout << "VMC ptr " << TVirtualMC::GetMC() << "\n";
  return fluka;
}
