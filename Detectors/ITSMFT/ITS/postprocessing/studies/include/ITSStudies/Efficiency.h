// Copyright 2019,2020 CERN and copyright holders of ALICE O2.
// See https://alice-o2.web.cern.ch/copyright for details of the copyright holders.
// All rights not expressly granted are reserved.
//
// This software is distributed under the terms of the GNU General Public
// License v3 {GPL Version 3), copied verbatim in the file "COPYING".
//
// In applying this license CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

#ifndef O2_EFFICIENCY_STUDY_H
#define O2_EFFICIENCY_STUDY_H

#include "Framework/DataProcessorSpec.h"
#include "ReconstructionDataFormats/GlobalTrackID.h"

namespace o2
{
namespace steer
{
class MCKinematicsReader;
}
namespace its
{
namespace study
{
using mask_t = o2::dataformats::GlobalTrackID::mask_t;
o2::framework::DataProcessorSpec getEfficiencyStudy(mask_t srcTracksMask, mask_t srcClustersMask, bool useMC, std::shared_ptr<o2::steer::MCKinematicsReader> kineReader);

int mOverlapsPerLayer[3] = {11,14,18};

// int mPhiCutsL0[11][2] = {{27,33},{54,63},{84,93},{114,123},{144,150},{171,180},{204,210},{231,240},{264,273},{297,303},{327,333}};
// int mPhiCutsL1[14][2] = {{18,27},{42,48},{63,69},{84,93},{105,114},{129,135},{147,159},{198,204},{222,225},{243,249},{267,270},{288,294},{312,318},{333,339}};
// int mPhiCutsL2[18][2] = {{15,21},{30,39},{51,57},{69,75},{87,93},{102,108},{120,126},{138,144},{156,162},{192,201},{210,219},{228,237},{249,255},{267,273},{285,291},{303,309},{321,327},{333,345}};
// int mPhiCutsL0[11][2] = {{24,30}, {54,60}, {87,90},{117,123},{147,153},{207,213}, {237,243},{267,270},{294,300},{324,330},{357,360}};
// int mPhiCutsL1[14][2] = {{18,24},{42,45},{63,69},{87,90},{111,114},{132,138},{156,159},{201,207},{225,228},{246,249},{267,270},{288,294},{309,315},{330,336}};
// int mPhiCutsL2[18][2] = {{15,18},{33,39},{51,57},{69,72},{87,90},{105,108},{123,126},{141,144},{159,162}, {198,201},{216,219},{231,237},{249,255},{267,270},{285,288},{303,306},{318,324},{336,342}};
// int mPhiCutsL0[11][2] = {{24,30}, {54,60}, {87,90},{117,123},{147,153},{207,213}, {237,243},{267,270},{294,300},{324,330},{354,360}};
// int mPhiCutsL1[14][2] = {{18,24},{42,45},{63,69},{87,90},{111,114},{132,138},{156,159},{201,204},{222,228},{246,249},{267,270},{288,294},{309,315},{330,336}};
// int mPhiCutsL2[18][2] = {{15,18},{33,39},{51,57},{69,72},{87,90},{105,108},{123,126},{141,144},{159,162}, {198,201},{216,219},{231,237},{249,255},{267,270},{285,288},{303,306},{318,324},{336,342}};
// int mPhiCutsL0[11][2] = {{25,28}, {56,58}, {87,89},{118,120},{148,151},{208,211}, {237,240},{267,269},{296,299},{325,328},{355,358}};
// int mPhiCutsL1[14][2] = {{19,21},{42,44},{65,66},{88,89},{111,112},{133,135},{156,157},{202,203},{224,226},{246,247},{268,269},{290,291},{311,313},{332,335}};
// int mPhiCutsL2[18][2] = {{16,17},{34,36},{52,54},{70,71},{88,89},{106,107},{124,125},{142,143},{159,161}, {198,199},{216,217},{233,235},{251,252},{268,269},{285,287},{303,304},{320,322},{338,339}};
// float mPhiCutsL0[11][2] = {{25.25,28.75}, {56.25,58.75}, {87.25,89.75},{118.25,120.75},{148.75,151.25},{208.25,211.25}, {237.75,240.25},{267.25,269.25},{296.75,299.25},{325.75,328.75},{355.25,357.75}};
// float mPhiCutsL1[14][2] = {{19.75,21.75},{42.75,44.25},{65.25,66.75},{88.25,89.75},{111.25,112.75},{133.75,135.25},{156.25,157.75},{202.75,203.75},{225.25,226.25},{246.75,247.75},{268.25,269.75},{290.25,291.75},{311.75,313.25},{332.75,335.25}};
// float mPhiCutsL2[18][2] = {{16.75,17.75},{34.75,36.25},{52.75,54.25},{70.75,71.75},{88.75,89.75},{106.25,107.75},{124.25,125.75},{142.25,143.75},{159.75,161.75}, {198.25,199.75},{216.25,217.75},{233.75,235.25},{251.25,252.25},{268.75,269.75},{285.75,287.25},{303.25,304.75},{320.75,322.25},{338.25,339.75}};
// float mPhiCutsL0[11][2] = {{25.5,28.5}, {56.5,58.5}, {87.5,89.5},{118.5,120.5},{149,151},{208.5,211}, {238,240},{267.5,269},{297,299},{326,328.5},{355.5,357.5}};
// float mPhiCutsL1[14][2] = {{20,21.5},{43,44},{65.5,66.5},{88.5,89.5},{111.5,112.5},{134,135},{156.5,157.5},{203,203.5},{225.5,226},{247,247.5},{268.5,269.5},{290.5,291.5},{312,313},{333,335}};
// float mPhiCutsL2[18][2] = {{17,17.5},{35,36},{53,54},{71,71.5},{89,89.5},{106.5,107.5},{124.5,125.5},{142.5,143.5},{160,161.5}, {198.5,199.5},{216.5,217.5},{234,235},{251.5,252},{269,269.5},{286,287},{303.5,304.5},{321,322},{338.5,339.5}};
// float mPhiCutsL0[11][2] = {{25.75,28.25}, {56.75,58.25}, {87.75,89.25},{118.75,120.25},{149.25,150.75},{208.25,210.75}, {238.25,239.75},{267.25,268.75},{297.25,298.75},{326.25,328.25},{355.75,357.25}};
// float mPhiCutsL1[14][2] = {{20.25,21.25},{43.25,43.75},{65.75,66.25},{88.75,89.25},{111.75,112.25},{134.25,134.75},{156.75,157.25},{203.25,203.25},{225.75,225.75},{247.25,247.25},{268.75,269.25},{290.75,291.25},{312.25,312.75},{333.25,334.75}};
// float mPhiCutsL2[18][2] = {{17.25,17.25},{35.25,35.75},{53.25,53.75},{71.25,71.25},{89.25,89.25},{106.75,107.25},{124.75,125.25},{142.75,143.25},{160.25,161.25}, {198.75,199.25},{216.75,217.25},{234.25,234.75},{251.75,251.75},{269.25,269.25},{286.25,286.25},{303.75,304.25},{321.25,321.75},{338.75,339.25}};

//// efficienza perfettamente uguale a 1, bin ristretto di 0.5
// float mPhiCutsL0[10][2] = {{26.25,28.25}, {56.75,58.25}, {87.75,88.75},{118.75,120.25},{149.25,150.75},{208.75,210.75}, {238.75,239.75},{297.75,298.75},{326.25,328.25},{355.75,357.25}};
// float mPhiCutsL1[8][2] = {{20.25,20.75},{43.25,43.75},{65.75,66.25},{88.75,89.25},{134.25,134.75},{156.75,157.25},{203.25,203.25},{333.25,334.75}};
// float mPhiCutsL2[8][2] = {{35.25,35.75},{106.75,107.25},{124.75,125.25},{142.75,143.25}, {198.75,199.25},{216.75,217.25},{303.75,304.25},{321.25,321.75}};

//// efficienza perfettamente >0.99, bin precisi, con tagli in pt e eta (eta 1.5, pt da 2 a 4.5)
// float mPhiCutsL0[10][2] = {{57.0, 57.5}, {88.5, 89.0},{119.5, 120.0},{149.5,150.5},{209.5,210.0}, {238.5,239.5},{268.5,269.5},{297.5,298.5}};
// float mPhiCutsL1[13][2] = {{42.5,44.0},{66.0,66.5},{88.5,89.0},{111.5,112.5},{134.0,135.0},{157.0,157.5},{203.0,204.0},{225.5,226.0},{247.0, 246.5},{268.5, 269.5},{290.0, 291.5},{312.5,313.0},{334.0,335.5}};
// float mPhiCutsL2[12][2] = {{35.0,35.5},{70.5,71.0},{89.0, 89.5},{106.5, 107.0},{124.5, 125.0},{142.5, 143.5},{160.5, 161.0}, {234.0, 235.0},{251.5, 252.0},{269.0,270.0},{286.0, 287.0},{338.5,339.5}};

//// efficienza perfettamente >0.99, bin dentro di 0.1, con tagli in pt e eta (eta 1, pt da 2 a 4.5)
// float mPhiCutsL0[8][2] = {{57.1, 57.4}, {88.6, 88.9},{119.6, 119.9},{149.6,150.4},{209.6,209.0}, {238.6,239.4},{268.6,269.4},{297.6,298.4}};
// float mPhiCutsL1[13][2] = {{42.6,43.9},{66.1,66.4},{88.6,88.9},{111.6,112.4},{134.1,134.9},{157.1,157.4},{203.1,203.9},{225.6,225.9},{247.1, 246.4},{268.6, 269.4},{290.1, 291.4},{312.6,312.9},{334.1,335.4}};
// float mPhiCutsL2[12][2] = {{35.1,35.4},{70.6,70.9},{89.1, 89.4},{106.6, 106.9},{124.6, 124.9},{142.6, 143.4},{160.6, 160.9}, {234.1, 234.9},{251.6, 251.9},{269.1,269.9},{286.1, 286.9},{338.6,339.4}};


//// efficienza perfettamente >0.99, bin dentro di 0.1, con tagli in pt e eta (eta 1, pt da 1 a 4.5)
///// questa è quella che funziona meglio con il phi preso come atan2, però i tagli sono stati aggiustati un po' ad occhio
// float mPhiCutsL0[6][2] = {{57.1, 57.4}, {119.6, 119.9},{149.6,150.4}, {238.6,239.4},{268.6,269.4},{297.1,297.9}};
// float mPhiCutsL1[10][2] = {{42.6,43.9},{66.1,66.4},{88.6,88.9},{111.6,112.4},{134.6,134.9},{225.6,225.9},{268.6, 269.4},{290.1, 291.4},{312.6,312.9},{334.1,334.9}};
// float mPhiCutsL2[12][2] = {{35.1,35.4},{70.6,70.9},{89.1, 89.4},{106.6, 106.9},{124.6, 124.9},{142.6, 143.4},{160.6, 160.9}, {234.6, 234.9},{251.6, 251.9},{269.1,269.9},{286.6, 286.9},{338.6,339.4}};

//// efficienza perfettamente >0.99, bin dentro di 0.1, con tagli in pt e eta (eta 1.5, pt da 0.5 a 4.5)
// float mPhiCutsL0[11][2] = {{26.1, 28.4}, {56.1,58.9},{87.6,89.4},{118.1, 120.4},{148.6,150.9}, {208.1, 211.4},{238.1,240.4},{267.6,269.4},{296.6,298.9},{325.6, 328.4},{355.1, 357.4}};
// float mPhiCutsL1[14][2] = {{19.6,21.4},{42.6,43.9},{65.1,66.9},{88.1,89.9},{111.1,112.4},{133.6,135.4},{156.1, 157.9},{203.1, 203.9},{225.1,225.9},{246.6,247.9},{268.1, 269.9},{290.1, 291.4},{311.6,314.4},{332.6,335.4}};
// float mPhiCutsL2[18][2] = {{16.6,17.9},{34.6,36.4},{52.6,53.9},{70.6,71.9},{88.6, 89.9},{106.6, 107.9},{124.1, 125.9},{142.1, 143.4},{160.1, 161.9}, {198.6, 199.9},{216.1, 217.9},{233.6, 234.9},{251.1, 252.4},{269.1,269.9},{286.1, 287.4},{303.1, 304.4},{320.6, 322.4},{338.1,339.9}};

//// efficienza perfettamente ==1 , bin dentro di 0.1, con tagli in pt e eta (eta 1, pt da 1 a 4.5) (nuovo phi preso con .phi e non con atan2)
// float mPhiCutsL0[11][2] = {{-153.4, -152.1}, {-123.4, -121.1},{-92.4, -90.6},{-61.4, -59.6},{-31.4, -29.1},{28.6, 30.9},{58.1, 60.4},{87.6, 89.4},{116.6, 118.9},{146.1, 148.4},{176.1, 176.9}};
// float mPhiCutsL1[14][2] = {{-159.9, -158.6}, {-137.4, -136.1},{-114.9, -113.1},{-91.9,-90.1},{-68.9,-67.6},{-46.4, -45.1},{-23.9, -22.6}, {23.1, 23.9},{45.1, 45.9},{66.6, 67.9},{88.6, 89.9}, {110.1, 111.4},{131.6,133.4},{153.1,155.4}};
// float mPhiCutsL2[18][2] = {{-163.4,-162.1},{-145.4,-144.1},{-127.4,-126.1},{-109.4, -108.1},{-91.4, -90.1},{-73.4,-72.1},{-55.9,-54.1},{-37.4,-36.6},{-19.9,-18.6},{19.1, 19.4},{36.1,37.4},{53.6, 54.9},{71.1,72.4},{88.6, 89.9},{106.1, 107.4},{123.6,124.4},{140.6,141.9},{158.1,159.9}};


//// prova prendendo quello che funziona con atan2 -180 (funziona bene come quello)
/// efficienza perfettamente >0.99, bin dentro di 0.1, con tagli in pt e eta (eta 1, pt da 1 a 4.5)
float mPhiCutsL0[6][2] = {{-122.9,-122.6},{-60.4,-60.1},{-30.4,-29.6},{58.6,59.4},{88.6,89.4},{117.1,117.9}};
float mPhiCutsL1[10][2] = {{-137.4,-136.1},{-113.9,-113.6},{-91.4,-91.1},{-68.4,-67.6},{-45.4,-45.1},{45.6,45.9},{88.6,89.4},{110.1,111.4},{132.6,132.9},{154.1,154.9}};
float mPhiCutsL2[12][2] = {{-144.9,-144.6},{-109.4,-109.1},{-90.9,-90.6},{-73.4,-73.1},{-55.4,-55.1},{-37.4,-36.6},{-19.4,-19.1},{54.6,54.9},{71.6,71.9},{89.1,89.9},{106.6,106.9},{158.6,159.4}};



///tagli sul phi della traccia
float mPhiTrackCutsL0[6][2] = {{28.1,31.4},{58.1,60.4},{87.6,89.4},{116.6,118.9},{146.1,148.4},{175.1,176.9}};
float mPhiTrackCutsL1[7][2] = {{23.1, 23.9},{44.6, 45.9},{66.6, 67.9},{88.1, 89.9},{110.1, 111.4},{131.6,133.4},{153.1,155.4}};
float mPhiTrackCutsL2[8][2] = {{36.1,37.9},{54.1, 54.9},{71.1,72.4},{88.6, 89.9},{106.1, 107.4},{123.6,123.9},{140.6,141.9},{158.1,159.9}};


//// aggiugere i tagli per phitrack

// float mEtaCuts[2] = {-1.5, 1.5};
float mEtaCuts[2] = {-1.0, 1.0};

// float mPtCuts[2] = {0.2, 1};
// float mPtCuts[2] = {2, 4.5};
// float mPtCuts[2] = {0.5, 4.5};
float mPtCuts[2] = {1, 4.5};
// float mPtCuts[2] = {0, 10};

// values obtained from the dca study
float dcaXY[3] = {-0.000326, -0.000217, -0.000187};
float dcaZ[3] = {0.000020, -0.000004, 0.000032};
float sigmaDcaXY[3] = {0.001375, 0.001279, 0.002681};
float sigmaDcaZ[3] = {0.002196, 0.002083, 0.004125};

int dcaCut = 8;

float mDCACutsXY[3][2] = {{dcaXY[0]-dcaCut*sigmaDcaXY[0],dcaXY[0]+dcaCut*sigmaDcaXY[0]},{dcaXY[1]-dcaCut*sigmaDcaXY[1],dcaXY[1]+dcaCut*sigmaDcaXY[1]},{dcaXY[2]-8*sigmaDcaXY[2],dcaXY[2]+dcaCut*sigmaDcaXY[2]}}; // cuts at 8 sigma for each layer for xy. The values represent m-8sigma and m+8sigma 
float mDCACutsZ[3][2] = {{dcaZ[0]-dcaCut*sigmaDcaZ[0],dcaZ[0]+dcaCut*sigmaDcaZ[0]},{dcaZ[1]-dcaCut*sigmaDcaZ[1],dcaZ[1]+dcaCut*sigmaDcaZ[1]},{dcaZ[2]-8*sigmaDcaZ[2],dcaZ[2]+dcaCut*sigmaDcaZ[2]}};

//Max distance betwwen clusters original and duplicated per direction (x,y,z) (it is the same for the 3 layers)
float mMaxDistanceClusters[3]={0.4, 0.4, 1};


} // namespace study
} // namespace its
} // namespace o2
#endif