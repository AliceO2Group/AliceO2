O2_SETUP(NAME "CCDB" RELATIVE_INCLUDE_PATH "include" RELATIVE_SOURCE_PATH "src")

# todo this should go but it is currently needed to generate the dictionary
set(INCLUDE_DIRECTORIES
    ${CMAKE_SOURCE_DIR}/CCDB/include
    ${CMAKE_SOURCE_DIR}/CCDB
    )
set(SYSTEM_INCLUDE_DIRECTORIES
    ${BASE_INCLUDE_DIRECTORIES}
    ${Boost_INCLUDE_DIR}
    ${ROOT_INCLUDE_DIR}
    ${FAIRROOT_INCLUDE_DIR}
    ${ZMQ_INCLUDE_DIR}
    )
#
#include_directories(${INCLUDE_DIRECTORIES})
#include_directories(SYSTEM ${SYSTEM_INCLUDE_DIRECTORIES})

#set(LINK_DIRECTORIES
#    ${ROOT_LIBRARY_DIR}
#    ${Boost_LIBRARY_DIRS}
#    ${FAIRROOT_LIBRARY_DIR}
#    )
#link_directories(${LINK_DIRECTORIES})

set(SRCS
    src/Manager.cxx
    src/Condition.cxx
    src/GridStorage.cxx
    src/LocalStorage.cxx
    src/FileStorage.cxx
    src/ConditionMetaData.cxx
    src/ConditionId.cxx
    src/IdPath.cxx
    src/IdRunRange.cxx
    src/Storage.cxx
    src/XmlHandler.cxx
    )

set(HEADERS
    include/CCDB/Condition.h
    include/CCDB/ConditionId.h
    include/CCDB/ConditionMetaData.h
    include/CCDB/FileStorage.h
    include/CCDB/GridStorage.h
    include/CCDB/IdPath.h
    include/CCDB/IdRunRange.h
    include/CCDB/LocalStorage.h
    include/CCDB/Manager.h
    include/CCDB/Storage.h
    include/CCDB/XmlHandler.h
    )

set(NO_DICT_SRCS
    src/ConditionsMQServer.cxx
    src/ConditionsMQClient.cxx
    )

#set(DEPENDENCIES
#    Base ParBase FairMQ ParMQ ${Boost_PROGRAM_OPTIONS_LIBRARY} ${Boost_SYSTEM_LIBRARY} ${Boost_LOG_LIBRARY} fairmq_logger pthread Core Tree XMLParser Hist
#    )

set(BUCKET_NAME CCDB_Bucket)
set(LIBRARY_NAME CCDB)
set(LINKDEF src/CCDBLinkDef.h)

message("NO_DICT_SRCS : ${NO_DICT_SRCS}")

# Does a lot of magic :
# - generate root dictionary
# - build library
# - install
O2_GENERATE_LIBRARY(
#    LIBRARY_NAME ${LIBRARY_NAME}
#    BUCKET_NAME ${BUCKET_NAME}
#    LINKDEF src/CCDBLinkDef.h
#    SOURCES ${SRCS}
#    HEADERS ${HEADERS}
#    NO_DICT_SOURCES ${NO_DICT_SRCS}
#    INCLUDE_DIRECTORIES ${INCLUDE_DIRECTORIES}
)

Set(Exe_Names
    conditions-server
    conditions-client
    )

Set(Exe_Source
    src/runConditionsServer.cxx
    src/runConditionsClient.cxx
    )

list(LENGTH Exe_Names _length)
math(EXPR _length ${_length}-1)

foreach (_file RANGE 0 ${_length})
  list(GET Exe_Names ${_file} _name)
  list(GET Exe_Source ${_file} _src)
  Set(EXE_NAME ${_name})
  Set(SRCS ${_src})
  Set(DEPENDENCIES CCDB)
  O2_GENERATE_EXECUTABLE(
      EXE_NAME ${_name}
      SOURCES ${_src}
      MODULE_LIBRARY_NAME ${LIBRARY_NAME}
      BUCKET_NAME ${BUCKET_NAME}
  )
endforeach (_file RANGE 0 ${_length})

# Says how and where to install software
# Targets:
#   * <prefix>/lib/<libraries>
#   * header location after install: <prefix>/include/<module>/*.h
#   * headers can be included by C++ code `#include <project>/Foo.hpp>`
#install(
#    TARGETS ${LIBRARY_NAME} ${APPLICATION_NAME}
#  #  EXPORT ${PROJECT_NAME}Targets            # for downstream dependencies
#    ARCHIVE DESTINATION lib COMPONENT libs   # static lib
#    RUNTIME DESTINATION bin COMPONENT libs   # binaries
#    LIBRARY DESTINATION lib COMPONENT libs   # shared lib
#  #  FRAMEWORK DESTINATION bin COMPONENT libs # for mac
#    PUBLIC_HEADER DESTINATION include/${LIBRARY_NAME} COMPONENT devel
#  #  INCLUDES DESTINATION include             # headers
#    )
install(
    FILES config/conditions-server.json
    config/conditions-client.json
    example/fill_local_ocdb.C
    DESTINATION bin/config
)