bool
leftTrace_golden(o2::MCTrack& t, std::vector<int> const& bitLUT)
{
  bool trace = false;
  trace |= t.leftTrace(o2::detectors::DetID::ITS, bitLUT);
  trace |= t.leftTrace(o2::detectors::DetID::TPC, bitLUT);
  trace |= t.leftTrace(o2::detectors::DetID::TRD, bitLUT);
  trace |= t.leftTrace(o2::detectors::DetID::TOF, bitLUT);
  return trace; 
}

bool
leftTrace_barrel(o2::MCTrack& t, std::vector<int> const& bitLUT)
{
  bool trace = false;
  trace |= t.leftTrace(o2::detectors::DetID::ITS, bitLUT);
  trace |= t.leftTrace(o2::detectors::DetID::TPC, bitLUT);
  trace |= t.leftTrace(o2::detectors::DetID::TRD, bitLUT);
  trace |= t.leftTrace(o2::detectors::DetID::TOF, bitLUT);
  trace |= t.leftTrace(o2::detectors::DetID::HMP, bitLUT);
  trace |= t.leftTrace(o2::detectors::DetID::EMC, bitLUT);
  trace |= t.leftTrace(o2::detectors::DetID::PHS, bitLUT);
  trace |= t.leftTrace(o2::detectors::DetID::FV0, bitLUT);
  trace |= t.leftTrace(o2::detectors::DetID::FT0, bitLUT);
  return trace;
}

bool
leftTrace_muon(o2::MCTrack& t, std::vector<int> const& bitLUT)
{
  bool trace = false;
  trace |= t.leftTrace(o2::detectors::DetID::ITS, bitLUT);
  trace |= t.leftTrace(o2::detectors::DetID::FV0, bitLUT);
  trace |= t.leftTrace(o2::detectors::DetID::FT0, bitLUT);
  trace |= t.leftTrace(o2::detectors::DetID::MFT, bitLUT);
  trace |= t.leftTrace(o2::detectors::DetID::MCH, bitLUT);
  trace |= t.leftTrace(o2::detectors::DetID::MID, bitLUT);
  return trace;
}

bool
leftTrace_any(o2::MCTrack& t, std::vector<int> const& bitLUT)
{
  return leftTrace_barrel(t, bitLUT) || leftTrace_muon(t, bitLUT);
}


std::function<bool(o2::MCTrack&, std::vector<int> const&)> leftTrace_selected = leftTrace_barrel;

/*
std::map<std::string, std::function<bool(o2::MCTrack&, std::vector<int> const&)> leftTrace = {
								      {"golden", leftTrace_golden},
								      {"barrel", leftTrace_barrel},
								      {"muon"  , leftTrace_muon}  ,
								      {"any"   , leftTrace_any}
};
*/

bool
leftTrace(o2::MCTrack& t, vector<o2::MCTrack>* tracks, std::vector<int> const& bitLUT) {
  if (leftTrace_selected(t, bitLUT)) return true; // this track has left trace in requested detectors
  //  if (leftTrace_barrel(t)) return true; // this track has left trace in requested detectors
  // check if any of the daughters left trace
  auto id1 = t.getFirstDaughterTrackId();
  auto id2 = t.getLastDaughterTrackId();
  if (id1 == -1) return false; // no daughters, no trace
  bool trace = false;
  for (int id = id1; id <= id2; ++id) {
    auto d = tracks->at(id);
    trace |= leftTrace(d, tracks, bitLUT); // at least one daughter has left trace
  }
  return trace;
}
