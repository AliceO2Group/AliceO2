#if !defined(__CLING__) || defined(__ROOTCLING__)
#include "TFile.h"
#include "TTree.h"
#include "TString.h"
#include "ITSMFTSimulation/Hit.h"
#include "TOFSimulation/Detector.h"
#include "EMCALBase/Hit.h"
#include "TRDSimulation/Detector.h" // For TRD Hit
#include "FT0Simulation/Detector.h" // for Fit Hit
#include "DataFormatsFV0/Hit.h"
#include "HMPIDBase/Hit.h"
#include "TPCSimulation/Point.h"
#include "PHOSBase/Hit.h"
#include "DataFormatsFDD/Hit.h"
#include "MCHSimulation/Hit.h"
#include "MIDSimulation/Hit.h"
#include "CPVBase/Hit.h"
#include "DataFormatsZDC/Hit.h"
#include "SimulationDataFormat/MCEventHeader.h"

#ifdef ENABLE_UPGRADES
#include "EndCapsSimulation/Hit.h"
#endif

#endif

template <typename T>
void duplicate(TTree* tr, const char* brname, TTree* outtree, int factor, std::vector<int> const* mask)
{
  auto br = tr->GetBranch(brname);
  if (!br) {
    return;
  }
  auto entries = br->GetEntries();
  T* entrydata = nullptr;
  br->SetAddress(&entrydata);

  int entrycount = 0;
  auto outbranch = outtree->GetBranch(brname);
  if (outbranch) {
    outbranch->SetAddress(&entrydata);
    entrycount = outbranch->GetEntries();
  }
  if (!outbranch) {
    outbranch = outtree->Branch(brname, &entrydata);
  }
  if (!outbranch) {
    std::cerr << "branch " << brname << " not created\n";
  }

  for (int i = 0; i < entries; ++i) {
    bool selected = true;
    if (mask) {
      selected = (*mask)[i] != 0;
    }
    if (selected) {
      br->GetEntry(i);
      for (int j = 0; j < factor; ++j) {
        entrycount++;
        outbranch->Fill();
      }
    }
  }
  outtree->SetEntries(entrycount);
}

// we need to do something special for MCEventHeaders
template <>
void duplicate<o2::dataformats::MCEventHeader>(TTree* tr, const char* brname, TTree* outtree, int factor, std::vector<int> const* mask)
{
  auto br = tr->GetBranch(brname);
  if (!br) {
    return;
  }
  auto entries = br->GetEntries();
  o2::dataformats::MCEventHeader* entrydata = nullptr;
  br->SetAddress(&entrydata);

  int eventID = 1;
  auto outbranch = outtree->GetBranch(brname);
  if (outbranch) {
    outbranch->SetAddress(&entrydata);
    eventID += outbranch->GetEntries();
  }
  if (!outbranch) {
    outbranch = outtree->Branch(brname, &entrydata);
  }
  if (!outbranch) {
    std::cerr << "branch " << brname << " not created\n";
  }

  for (int i = 0; i < entries; ++i) {
    bool selected = true;
    if (mask) {
      selected = (*mask)[i] != 0;
    }
    if (selected) {
      br->GetEntry(i);
      for (int j = 0; j < factor; ++j) {
        entrydata->SetEventID(eventID++);
        outbranch->Fill();
      }
    }
  }
  outtree->SetEntries(eventID - 1);
}

TTree* getHitTree(o2::parameters::GRPObject const* grp, const char* filebase, o2::detectors::DetID detid, const char* mode = "OPEN")
{
  if (!grp) {
    std::cerr << "GRP is null\n";
    return nullptr;
  }
  if (!grp->isDetReadOut(detid)) {
    return nullptr;
  }
  std::string filename(o2::base::NameConf::getHitsFileName(detid, filebase).c_str());

  // shamefully leaking memory as the TTree cannot live without the file...
  TFile* file = new TFile(filename.c_str(), mode);
  TTree* t = nullptr;
  t = (TTree*)file->Get("o2sim");
  if (t==nullptr || std::strcmp(mode,"RECREATE") == 0) {
    t = new TTree("o2sim", "o2sim");
  }
  return t;
}

template <typename T>
struct HitContainer {
  using type = std::vector<T>;
};
template <>
struct HitContainer<o2::tpc::HitGroup> {
  using type = o2::tpc::HitGroup;
};

template <typename T>
void duplicateV(o2::parameters::GRPObject const* grp,
                const char* filebase, 
                o2::detectors::DetID detid, 
                const char* newfilebase, 
                const char* mode /*mode for output file*/, 
                int factor, 
                std::vector<int> const* mask /*triggermask*/)
{
  // open old file and extract tree
  auto tr = getHitTree(grp, filebase, detid);
  if (!tr) {
    return;
  }
  auto outtree = getHitTree(grp, newfilebase, detid, mode);
  if (!outtree) {
    return;
  }

  // duplicate entries in all branches and copy
  auto branches = o2::detectors::SimTraits::DETECTORBRANCHNAMES[(int)detid];
  for (auto& br : branches) {
    duplicate<std::vector<T>>(tr, br.c_str(), outtree, factor, mask);
  }
  // write outtree
  outtree->Write("",TObject::kWriteDelete);
}

TTree* getKinematicsTree(const char* filebase, TFile *& fileptr, const char* mode = "OPEN")
{
  // shamefully leaking memory as the TTree cannot live without the file...
  TFile* file = new TFile(o2::base::NameConf::getMCKinematicsFileName(filebase).c_str(), mode);
  fileptr = file;
  TTree* t = nullptr;
  t = (TTree*)file->Get("o2sim");
  std::cout << "MODE " << mode << "Got tree " << t << "\n";
  if ( t==nullptr || std::strcmp(mode,"RECREATE")==0 ) {
    t = new TTree("o2sim", "o2sim");
  }
  return t;
}

// Macro to duplicate hit output of a simulation
// This might be useful to enlarge input for digitization or to engineer
// sequences of identical hit structures in order test pileup.
// Mask can be used to filter out specific entries.
void duplicateHits(const char* filebase = "o2sim", const char* newfilebase = "o2sim_duplicated", const char* mode="RECREATE", int factor = 2, std::vector<int> const *mask = nullptr)
{
  // NOTE: There might be a way in which this can be achieved
  // without explicit iteration over branches and type ... just by using TClasses

  // READ GRP AND ITERATE OVER DETECTED PARTS
  auto oldgrpfilename = o2::base::NameConf::getGRPFileName(filebase);
  std::cout << "OLD GRP NAME " << oldgrpfilename << "\n";
  auto grp = o2::parameters::GRPObject::loadFrom(oldgrpfilename.c_str());
  if (!grp) {
    std::cerr << "No GRP found; exiting\n";
    return;
  }
  // cp GRP for new sim files
  auto newgrpfilename = o2::base::NameConf::getGRPFileName(newfilebase);
  std::stringstream command;
  command << "cp " << oldgrpfilename << " " << newgrpfilename;
  system(command.str().c_str());

  // duplicate kinematics stuff
  TFile* outfileptr = nullptr;
  auto kintree = getKinematicsTree(filebase, outfileptr, "OPEN");
  auto newkintree = getKinematicsTree(newfilebase, outfileptr, mode);
  // duplicate meta branches
  duplicate<std::vector<o2::MCTrack>>(kintree, "MCTrack", newkintree, factor, mask);
  duplicate<o2::dataformats::MCEventHeader>(kintree, "MCEventHeader.", newkintree, factor, mask);
  // TODO: fix EventIDs in the newly created MCEventHeaders
  duplicate<std::vector<o2::TrackReference>>(kintree, "TrackRefs", newkintree, factor, mask);
  newkintree->Write("", TObject::kWriteDelete);
  outfileptr->Close();

  // duplicating hits
  using namespace o2::detectors;
  duplicateV<o2::itsmft::Hit>(grp, filebase, DetID::ITS, newfilebase, mode, factor, mask);
  duplicateV<o2::itsmft::Hit>(grp, filebase, DetID::MFT, newfilebase, mode, factor, mask);
  duplicateV<o2::tof::HitType>(grp, filebase, DetID::TOF, newfilebase, mode, factor, mask);
  duplicateV<o2::emcal::Hit>(grp, filebase, DetID::EMC, newfilebase, mode, factor, mask);
  duplicateV<o2::trd::Hit>(grp, filebase, DetID::TRD, newfilebase, mode, factor, mask);
  duplicateV<o2::phos::Hit>(grp, filebase, DetID::PHS, newfilebase, mode, factor, mask);
  duplicateV<o2::cpv::Hit>(grp, filebase, DetID::CPV, newfilebase, mode, factor, mask);
  duplicateV<o2::zdc::Hit>(grp, filebase, DetID::ZDC, newfilebase, mode, factor, mask);
  duplicateV<o2::ft0::HitType>(grp, filebase, DetID::FT0, newfilebase, mode, factor, mask);
  duplicateV<o2::fv0::Hit>(grp, filebase, DetID::FV0, newfilebase, mode, factor, mask);
  duplicateV<o2::fdd::Hit>(grp, filebase, DetID::FDD, newfilebase, mode, factor, mask);
  duplicateV<o2::hmpid::HitType>(grp, filebase, DetID::HMP, newfilebase, mode, factor, mask);
  duplicateV<o2::mid::Hit>(grp, filebase, DetID::MID, newfilebase, mode, factor, mask);
  duplicateV<o2::mch::Hit>(grp, filebase, DetID::MCH, newfilebase, mode, factor, mask);
  duplicateV<o2::tpc::HitGroup>(grp, filebase, DetID::TPC, newfilebase, mode, factor, mask);

#ifdef ENABLE_UPGRADES
  duplicateV<o2::itsmft::Hit>(grp, filebase, DetID::FT3, newfilebase, mode, factor, mask);
#endif

}
