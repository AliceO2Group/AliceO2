void print(int itr, o2::MCTrack& t) {
std::cout << itr << " "
	      << t.isPrimary() << t.getToBeDone() << t.getInhibited() << " "
	      << t.isPrimary() << t.getToBeDone() << t.getInhibited() << "\t"
	      << t.GetPdgCode() << "\t"
	      << t.getMotherTrackId() << "\t"
	      << t.getSecondMotherTrackId() << "\t"
	      << t.getFirstDaughterTrackId() << "\t"
	      << t.getLastDaughterTrackId() << "\t"
	      << std::endl;
    }	   


void
check_kine_labels(const char *fname)
{

  auto fin = TFile::Open(fname);
  auto tin = (TTree*)fin->Get("o2sim");
  auto tracks = new vector<o2::MCTrack>;
  tin->SetBranchAddress("MCTrack", &tracks);
  auto nev = tin->GetEntries();
  
  // loop over events
  for (int iev = 0; iev < nev; ++iev) {    
    tin->GetEntry(iev);

    // loop over tracks from the beginning
    for (int itr = 0; itr < tracks->size(); ++itr) {
      auto& t = tracks->at(itr);
      //      print(itr, t);
      auto id1 = t.getFirstDaughterTrackId();
      auto id2 = t.getLastDaughterTrackId();
      if (id1 == -1) continue; // track has no daughter

      // loop over daughters
      for (int jtr = id1; jtr <= id2; ++jtr) {
	auto& d = tracks->at(jtr);

	if (d.getSecondMotherTrackId() == -1) { // if it only has first mother, check label is the same
	  if (itr != d.getMotherTrackId()) {
	    std::cout << "THIS IS WRONG (looping forward)" << std::endl;
	    std::cout << "mother:   "; print(itr, t);
	    std::cout << "daughter: "; print(jtr, d);
	  }
	} else { // else if it has first and second mother, check that label is in between 
	  if (itr < d.getMotherTrackId() || itr > d.getSecondMotherTrackId()) {
	    std::cout << "THIS IS WRONG (looping forward)" << std::endl;
	    std::cout << "mother:   "; print(itr, t);
	    std::cout << "daughter: "; print(jtr, d);
	  }
	}	
      }
    }

    // loop over tracks from the end
    for (int itr = tracks->size() - 1; itr >= 0; --itr) {

      auto& t = tracks->at(itr);
      auto im1 = t.getMotherTrackId();
      auto im2 = t.getSecondMotherTrackId();
      if (im1 == -1) continue; // track has no mother
      if (im2 == -1) { // track has only one mother
	auto& m = tracks->at(im1);
	if (itr < m.getFirstDaughterTrackId() || itr > m.getLastDaughterTrackId()) {
	    std::cout << "THIS IS WRONG (looping backward)" << std::endl;
	    std::cout << "mother:   "; print(im1, m);
	    std::cout << "daughter: "; print(itr, t);
	}
      } else { // track has first and second mother
	continue;
	
      }
      
    }
    
  }
    
}
